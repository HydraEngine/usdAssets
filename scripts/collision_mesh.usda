#usda 1.0
(
    endTimeCode = 1000
    startTimeCode = 0
    upAxis = "Y"
)

def PhysicsScene "physicsScene"
{
    vector3f physics:gravityDirection = (0, -1, 0)
    float physics:gravityMagnitude = 9.81
}

def Xform "compoundRigid" (
    prepend apiSchemas = ["PhysicsRigidBodyAPI"]
)
{
    quatf xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:translate = (0, 10, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient"]

    def Mesh "physicsBoxShape" (
        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
    )
    {
        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [2, 6, 5, 1, 2, 5, 7, 4, 0, 7, 0, 3, 1, 2, 0, 1, 0, 3, 5, 6, 4, 5, 4, 7, 6, 4, 0, 6, 0, 2, 5, 7, 3, 5, 3, 1]
        rel material:binding:physics = </material> (
            bindMaterialAs = "weakerThanDescendants"
        )
        uniform token physics:approximation = "convexDecomposition"
        bool physics:collisionEnabled = 1
        point3f[] points = [(1, 1, 1), (0, 1, 0), (1, 1, 0), (0, 1, 1), (1, 0, 1), (0, 0, 0), (1, 0, 0), (0, 0, 1)]
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (25, 25, 25)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

def Material "material" (
    prepend apiSchemas = ["PhysicsMaterialAPI"]
)
{
    float physics:density = 1000
    float physics:dynamicFriction = 1
    float physics:restitution = 0
    float physics:staticFriction = 1
}

def Cube "box0" (
    prepend apiSchemas = ["PhysicsCollisionAPI"]
)
{
    color3f[] primvars:displayColor = [(0.64705884, 0.08235294, 0.08235294)]
    double size = 100
    quatf xformOp:orient = (1, 0, 0, 0)
    float3 xformOp:scale = (1, 0.1, 1)
    double3 xformOp:translate = (0, -50, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
}

